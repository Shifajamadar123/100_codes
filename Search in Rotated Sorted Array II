class Solution {
    public boolean search(int[] a, int target) {
        int ans=pivot(a);
        boolean res;
        if(ans==-1)
        {
            return(bin(a,target,0,a.length-1));
            
        }
        res=bin(a,target,0,ans);
        if(res==false)
        {
            res=bin(a,target,ans+1,a.length-1);
        }
        return(res);
    }
    static int pivot(int []a)
    {
        int start=0;
        int end=a.length-1;
        while(start<end)
        {
            int mid=start+(end-start)/2;
            if(mid<end && a[mid]>a[mid+1])
                return(mid);
            else if(mid>start && a[mid]<a[mid-1])
                return(mid-1);
            if(a[mid]==a[start] && a[start]==a[end])
            {
                if(a[start]>a[start+1])
                    return(start);
                start++;
                if(a[end]<a[end-1])
                    return(end-1);
                end--;
            }
            else if(a[start]<a[mid] || (a[start]==a[mid] && a[mid] > a[end]))
            {
                start=mid+1;
            }
            else
                end=mid-1;
        }
        return(-1);
    }
    static boolean bin(int []a,int target,int start,int end)
    {
        if(a[start]<a[end])	
			{
				while(start<=end)
				{
					
					int mid=start +(end-start)/2;
					if(target<a[mid])
					{
						end=mid-1;
					}
					else if(target>a[mid])
					{
						start=mid+1;
					}
					else
					{
						return(true);
					}
				}
			}
			else
			{
				while(start<=end)
				{
					int mid=start +(end-start)/2;
					if(target<a[mid])
					{
						start=mid+1;
					}
					else if(target>a[mid])
					{
						end=mid-1;
					}
					else
					{
						return(true);
					}
				}
			}
		return(false);
    }
}
