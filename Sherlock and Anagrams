import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'sherlockAndAnagrams' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int sherlockAndAnagrams(String s) {
    // Write your code here
    HashMap<String,Integer> h=new HashMap<String,Integer>();
    for(int i=0;i<s.length();i++)
    {
        for(int j=i;j<s.length();j++)
        {
            String temp = s.substring(i,j+1);
            // System.out.println(temp);
            char tempArray[] = temp.toCharArray();
            Arrays.sort(tempArray);
            if(h.containsKey(new String(tempArray)))
            {
                h.put(new String(tempArray), h.get(new String(tempArray))+1);
            }
            else
            {
                h.put(new String(tempArray),1);
            }
        }
    }
    
    // for(String x: h.keySet())
    // {
    //     System.out.println(x);
    // }
    // for(int value: h.values())
    // {
    //     System.out.println(value);
    // }
    
    int c=0;
    for(int value: h.values())
    {
        c += (value*(value-1))/2;
    }
    return c;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.sherlockAndAnagrams(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
