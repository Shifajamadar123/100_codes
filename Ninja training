DP:

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        int [][]dp = new int[n][4];
        for (int[] row: dp)
            Arrays.fill(row, -1);
        dp[0][0] = Math.max(points[0][1],points[0][2]);
        dp[0][1] = Math.max(points[0][0],points[0][2]);
        dp[0][2] = Math.max(points[0][1],points[0][0]);
        dp[0][3] = Math.max(points[0][1],Math.max(points[0][2],points[0][0]));

        for(int i=1;i<n;i++)
        {
            for(int last=0;last<4;last++)
            {
                dp[i][last] = 0;
                for(int task=0;task<3;task++)
                {
                    if(task!=last)
                    {
                        int point = points[i][task] + dp[i-1][task];
                        dp[i][last] = Math.max(dp[i][last],point);
                    }
                }
            }
        }
        return dp[n-1][3];
    }

}

Space optimization:

import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        int []dp = new int[4];
        dp[0] = Math.max(points[0][1],points[0][2]);
        dp[1] = Math.max(points[0][0],points[0][2]);
        dp[2] = Math.max(points[0][1],points[0][0]);
        dp[3] = Math.max(points[0][1],Math.max(points[0][2],points[0][0]));

        for(int i=1;i<n;i++)
        {
            int []temp = new int[4];
            for(int last=0;last<4;last++)
            {
                temp[last] = 0;
                for(int task=0;task<3;task++)
                {
                    if(task!=last)
                    {
                        temp[last] = Math.max(temp[last],points[i][task]+dp[task]);
                    }
                }
            }
            //System.out.println(Arrays.toString(temp));
            dp=temp;
        }
        return dp[3];
    }

}
