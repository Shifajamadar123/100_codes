#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define STACKSIZE 100
struct stack
{
    char s[STACKSIZE];
    int top;
};
struct tree
{
    char data;
    struct tree *left, *right;
};
struct tree *node;
int cal(struct tree *);
void operand(char);
void operators(char);
int check(char);


int top = -1;
struct tree *stack[20];
struct tree *node;

void push1(struct tree* node) {
    stack[++top] = node;
}

struct tree * pop1()
{
    return (stack[top--]);
}

int cal(struct tree *node) {
    int ch;
    ch = check(node->data);
    if (ch == 1)
        return node->data - 48;
    else if (ch == 2) {
        if (node->data == '+')
            return cal(node->left) + cal(node->right);
        if (node->data == '-')
            return cal(node->left) - cal(node->right);
        if (node->data == '*')
            return cal(node->left) * cal(node->right);
        if (node->data == '/')
            return cal(node->left) / cal(node->right);
    }
}

void operand(char b)
{
    node = (struct tree*) malloc(sizeof(struct tree));
    node->data = b;
    node->left = NULL;
    node->right = NULL;
    push1(node);
}

void operators(char a)
{
    node = (struct tree*) malloc(sizeof(struct tree));
    node->data = a;
    node->right = pop1();
    node->left = pop1();
    push1(node);
}

int check(char ch)
{
    if (ch == '+' || ch == '-' || ch == '/' || ch == '*')
        return 2;
    else
        return 1;
}

int empty(struct stack stk)
{
    if(stk.top==-1)
        return 1;
    else
        return 0;
}

void push(struct stack *ps,char data)
{
    ps->top=ps->top+1;
    ps->s[ps->top]=data;
}

char pop(struct stack *ps)
{
    char data;
    data=ps->s[ps->top];
    ps->top=ps->top-1;
    return(data);
}

char stacktop(struct stack stk)
{
    return(stk.s[stk.top]);
}

int isoperand(char ch)
{
    if(isalpha(ch)|| isdigit(ch))
        return(1);
    else
        return(0);
}

int isAssocLR(char ch)
{
    if(ch=='+' || ch=='-' || ch=='*' || ch=='/')
        return(1);
    else
        return(0);
}

int isAssocRL(char ch)
{
    if(ch=='$')
        return(1);
    else
        return(0);
}

int precd(char op)
{
    if(op=='+' || op=='-')
        return(1);
    else if(op=='*' || op=='/')
        return(2);
    else if(op=='$')
        return(3);
    else
        return -1;
}

void convert(char inf[],char postf[])
{
    struct stack stk;
    int i,p;
    char inp;
    stk.top=-1;
    for(i=p=0;(inp=inf[i])!='\0';i++)
    {
        if(isoperand(inp))
        {
            postf[p++]=inp;
        }
        else if(inp==')')
        {
            while(stacktop(stk)!='(')
            {
                postf[p++]=pop(&stk);
            }
            pop(&stk);
        }
        else
        {
            do
            {
                if(empty(stk) || inp=='(' || stacktop=='(')
                    break;
                else if(isAssocLR(inp) && precd(inp)>precd(stacktop(stk)))
                    break;
                else if(isAssocRL(inp) && precd(inp)>=precd(stacktop(stk)))
                    break;
                else
                    postf[p++]=pop(&stk);
            }while(1);
            push(&stk,inp);
        }
    }
    while(!empty(stk))
        postf[p++]=pop(&stk);
    postf[p]='\0';
}



int main()
{
    char infix[100],postfix[100];
    unsigned int i;
    int p,ans,k;
    printf("\nEnter infix expression:  ");
    scanf("%s",infix);
    convert(infix,postfix);
    printf("-------------------------------\n");
    printf("\nPostfix expression is:  %s",postfix);
    printf("\n-------------------------------\n");
     k = strlen(postfix);
    i = 0;
    for (i = 0; postfix[i] != '\0'; i++) {
        p = check(postfix[i]);
        if (p == 1)
            operand(postfix[i]);
        else if (p == 2)
            operators(postfix[i]);
    }
    ans = cal(stack[top]);
    printf("\nThe value of the postfix expression you entered is %d\n", ans);
    return 0;
}
