Method 1:

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> q=new PriorityQueue<>(Collections.reverseOrder());
        for(int i=0;i<nums.length;i++)
        {
            q.add(nums[i]);
        }
        for(int i=0;i<k-1;i++)
        {
            q.poll();
        }
        return q.peek();
    }

}

Method 2:

class Solution {
    public int findKthLargest(int[] nums, int k) {
        build(nums);
        // System.out.println(Arrays.toString(nums));
        for(int i=0;i<k-1;i++)
        {
            extractMax(nums,nums.length-i);
            // System.out.println(Arrays.toString(nums));
        }
        return nums[0];
    }

    public static void build(int []nums)
    {
        for(int i=(nums.length-2)/2 ;i>=0;i--)
        {
            heapify(nums,nums.length,i);
        }
    }

    public static void heapify(int nums[],int n,int i)
    {
        int max = i;
        int l = (2*i+1);
        int r = (2*i+2);

        if(l<n && nums[l]>nums[max])
        {
            max = l;
        }
        if(r<n && nums[r]>nums[max])
        {
            max = r;
        }

        if(max !=i)
        {
            swap(nums,i,max);
            heapify(nums,n,max);
        }
    }

    public static void swap(int []nums,int i,int j)
    {
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }

    public static void extractMax(int []nums,int i)
    {
        nums[0]=nums[i-1];
        heapify(nums,i,0);
    }

}

Method 3:

class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return(nums[nums.length-k]);
    }
}
