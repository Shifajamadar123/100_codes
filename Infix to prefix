#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define STACKSIZE 100

struct stack
{
    char s[STACKSIZE];
    int top;
};

int empty(struct stack stk)
{
    if(stk.top==-1)
        return 1;
    else
        return 0;
}

void push(struct stack *ps,char data)
{
    ps->top=ps->top+1;
    ps->s[ps->top]=data;
}

char pop(struct stack *ps)
{
    char data;
    data=ps->s[ps->top];
    ps->top=ps->top-1;
    return(data);
}

char stacktop(struct stack stk)
{
    return(stk.s[stk.top]);
}

int isoperand(char ch)
{
    if(isalpha(ch)|| isdigit(ch))
        return(1);
    else
        return(0);
}

int isAssocLR(char ch)
{
    if(ch=='+' || ch=='-' || ch=='*' || ch=='/')
        return(1);
    else
        return(0);
}

int isAssocRL(char ch)
{
    if(ch=='$')
        return(1);
    else
        return(0);
}

int precd(char op)
{
    if(op=='+' || op=='-')
        return(1);
    else if(op=='*' || op=='/')
        return(2);
    else if(op=='$')
        return(3);
    else
        return -1;
}

void convert(char inf[],char pref[])
{
    struct stack stk;
    int i,p;
    char inp;
    strrev(inf);
    stk.top=-1;
    for(i=p=0;(inp=inf[i])!='\0';i++)
    {
        if(isoperand(inp))
        {
            pref[p++]=inp;
        }
        else if(inp=='(')
        {
            while(stacktop(stk)!=')')
            {
                pref[p++]=pop(&stk);
            }
            pop(&stk);
        }
        else
        {
            do
            {
                if(empty(stk)||inp==')'||stacktop==')')
                    break;
                else if(isAssocLR(inp)&&precd(inp)>=precd(stacktop(stk)))
                    break;
                else if(isAssocRL(inp)&&precd(inp)>precd(stacktop(stk)))
                    break;
                else
                    pref[p++]=pop(&stk);
            }while(1);
            push(&stk,inp);
        }
    }
    while(!empty(stk))
        pref[p++]=pop(&stk);
    pref[p]='\0';
    strrev(inf);
    strrev(pref);
}

int main()
{
    char infix[100],prefix[100];
    printf("\nEnter infix expression:  ");
    gets(infix);
    convert(infix,prefix);
    printf("\n---------------------------------\n");
    printf("\nThe prefix expression is: %s ",prefix);
    printf("\n---------------------------------\n");
    return 0;
}
