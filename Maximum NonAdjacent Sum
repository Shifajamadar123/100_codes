import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
		int []dp = new int[nums.size()+1];

		dp[0]= 0;
		dp[1]= nums.get(0);
		for(int i=2;i<=nums.size();i++)
		{
			dp[i] = Math.max(dp[i-1],dp[i-2]+nums.get(i-1));
		}
		return dp[nums.size()];

	}
}


Recursion:

import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
		return fun(nums.size()-1,nums);

	}

	public static int fun(int i,ArrayList<Integer> l)
	{
		if(i==0)
		{
			return l.get(0);
		}
		if(i<0)
		{
			return 0;
		}
		int pick = l.get(i)+fun(i-2,l);
		int noPick = fun(i-1,l);

		return Math.max(pick,noPick);

	}
}

Space optimization:

import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
		int prev2=0;
		int prev1=nums.get(0);
		for(int i=1;i<nums.size();i++)
		{
			int take = nums.get(i);
			if(i>1)
			{
				take +=prev2;
			}
			int noTake = prev1;
			int cur = Math.max(take,noTake);
			prev2=prev1;
			prev1=cur;
		}
		return prev1;

	}
}
